<?xml version="1.0" encoding="UTF-8" ?>
<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<!--
	■全般的な注意

	設定上の大文字小文字に関して
	XMLは、要素名、属性名および値において、全てに大文字小文字が区別されます。
	間違えないように注意して下さい。

	 テーブル名、カラム名の大文字小文字に関して
	JDBCドライバからメタデータを取得し、その名前を元に決定します。
	全てはDBMS（＆JDBCドライバ）の実装に従います。
	よって、この設定ファイル上でテーブル名、カラム名を指定する際には、
	JDBCからの戻り値とCaseSensitiveにマッチするように注意して下さい。

	■機能概要
	データアクセス用のテーブル定義と、データ格納用のDTO（DataTransferObject）を自動生成します。
	また付随機能として、特定のテーブルの値を元に、Enumを自動生成します。
	※DBMSのEnum型はサポートしません。

	●テーブル定義クラスの自動生成
	テーブル定義は、一つのクラスファイル内に、テーブル毎にstaticな定数として生成されます。
	これらの名前も、Javaの言語使用に合致するよう、自動的に変換されます。
	デフォルトではToUpper（ex:aaa_bbb→AAA_BBB）となります。

	※名称変換処理に関して：
	DBMSによっては、大文字小文字の混在や、2バイト文字が使用される場合があります。
	これらの場合、デフォルトままでは意図しない変換が行われる可能性がありますので、それぞれに
	任意のNameResolverを指定して下さい。


	●DTOの生成
	DTOは、テーブル毎に一つのクラスファイルが作成されます。
	これらのクラス名は、Javaの言語使用に合致するよう、自動的に変換されます。
	デフォルトではキャメライズ（ex:aaa_bbb→AaaBbb）となります。

	DTOクラスには、各カラムに対応したフィールドが用意されます。
	フィールド名に関しては、クラス名と同様に名称変換ロジックが用意されます。
	デフォルトはキャメライズ（但し先頭小文字）となります。

	フィールドの型はJDBCのメタデータから自動的に決定されますが、
	converterを指定して、任意の型を設定する事も可能です。
	※converterは、フィールド型と、JDBCの戻り型からその型への変換式、その型からJDBC型への変換式、の3点が必要です。

	TODO DATETIME型：JDBCによってはjava.util.Dateを返すものと、java.sql.Timestamp型を返すものがあります

	TIME型に関して：
	　通常java.sql.Time型が返されるが、このクラスはtoSring()、valueOf()などでミリ秒に対応していません。
	　このため、ミリ秒まで有意な値を含むTIME型カラムと接続すると、いろいろ問題・混乱のネタになります。
　　　　この問題を回避するため、TIME型は独自型であるjp.gr.java_conf.sqlutils.date.SqlTime型にバインドします。
　　　　このクラスはjava.sql.Time型を継承し、かつミリ秒を保持しません（常に0）。
　　　　これは、一般的な用途として「時分秒のみを扱う」想定で機能を限定する事で、PG上予期せぬ不具合を回避する事を
　　　　目的としています。逆に正しくミリ秒まで保持したい場合は、コンバータを設定して、
　　　　jp.gr.java_conf.sqlutils.date.SqlTimeMSec型にバインドして下さい。

	●Enumの自動生成
	名前と値のセットでEnumを構築します。
	値は、文字型あるいは数値型（Integerに収まる範囲）が可能です。
	一つのテーブルから、複数のEnum定義を生成します。
	Enum名およびEnumItem名の決定方法は、適宜にNameResolverを指定して下さい。
	デフォルトは、どちらもUnderSplittedである事を想定して、Enum名への変換はキャメライズ、
	EnumItem名への変換はToUpperです。
	ex: build_type | type_static → BuildType.TYPE_STATIC

	 -->

	<!--
	 dbms:ORACLE, POSTGRES, MYSQL, SQLSERVER, H2, ELSE
	 -->
	<db
		dbms="POSTGRES"
		driver="org.postgresql.Driver"
		url="jdbc:postgresql://localhost:5432/sqlutils"
		user="postgres"
		pass="vega"
		schema="public" />

	<output
		basePath="D:\works\sqlutils-generator\src\test\java"
	/>

	<!-- Enum生成機能が不要の場合は、この要素丸ごと削除して下さい -->
	<enumGenerator
		package="jp.gr.java_conf.sqlutils.dtogenerator.postgres.enumconst" >

		<!--
		dataType: INT / STR
		カラム名はデフォルト通りなら省略可能
		 -->
		<srcTable
			dataType="INT"
			tblName="int_value_enums"
			baseClassName="IntEnums"
			enumNameCol="enum_name"
			enumItemNameCol="element_name"
			enumItemValueCol="element_value"
			enumItemOrderCol="element_order">
			<enumNameResolver xsi:type="camelizeAndCapitalize"/>
			<itemNameResolver xsi:type="void"/>
		</srcTable>

		<srcTable
			dataType="STR"
			tblName="string_value_enums"
			baseClassName="StrEnums"
			enumNameCol="enum_name"
			enumItemNameCol="element_name"
			enumItemValueCol="element_value"
			enumItemOrderCol="element_order">
			<enumNameResolver xsi:type="camelizeAndCapitalize"/><!-- xsi:typeでの指定は、小文字始まりなので注意 -->
			<itemNameResolver xsi:type="void"/>
		</srcTable>
 	</enumGenerator>

	<!-- 出力先package：
	Dtoは、この直下にテーブル毎に個別にクラスファイルが作成される。
	Table-Definitions（定義）はまとめて一つのクラスファイルに。 -->
	<dtoGenerator
		package="jp.gr.java_conf.sqlutils.dtogenerator.postgres.dto"
		definitionClassName="Tables"><!-- default is 'TableDefine' -->

		<defaultTblNameResolver>
			<dtoClassName xsi:type="camelizeAndCapitalize" prefix="Dto"/>
			<definitionName xsi:type="toUpper"/>
		</defaultTblNameResolver>
		<defaultColNameResolver>
			<dtoFieldName xsi:type="camelize"/>
			<definitionName xsi:type="toUpper"/>
		</defaultColNameResolver>

		<!-- table名も大文字小文字を区別するので注意（JDBCが返すテーブル名が大文字か小文字か、ドライバによっても異なるかもしれない） -->
		<table name="test">

			<tblNameResolver>
				<dtoClassName xsi:type="void" prefix="Dto"/>
				<definitionName xsi:type="void"/>
			</tblNameResolver>

			<defaultColNameResolver>
				<dtoFieldName xsi:type="void"/>
				<definitionName xsi:type="void"/>
			</defaultColNameResolver>

			<column name="integer">

				<colNameResolver>
					<dtoFieldName xsi:type="void"/>
					<definitionName xsi:type="void"/>
				</colNameResolver>

				<!-- ここでは名前変換を一切しないので、enumNameは、Enum生成側の設定の結果導出されるEnum名で指定する事 -->
				<enumRelation baseClassName="IntEnums" enumName="Status" />
			</column>
		</table>

		<table name="AAA" >
			<column name="COLA">
				<colNameResolver>
					<dtoFieldName xsi:type="specified" name="column_a"/>
					<definitionName xsi:type="specified" name="column_a"/>
				</colNameResolver>
			</column>
		</table>

		<table name="BBB" >
			<column name="COLA">
				<converter
					dtoFieldClassType="a"
					setToDtoConversion="b"
					getFromDtoConversion="c" />
			</column>
			<column name="COLB">
				<intBoolConverter/>
			</column>
			<column name="COLC">
				<sequence name="" />
			</column>
			<column name="COLD" isLogicalDeleteFlag="true" />
			<column name="COL_E" isOptimisticLockKey="true" />
		</table>
	</dtoGenerator>

</root>
